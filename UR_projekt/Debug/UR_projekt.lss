
UR_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001fa  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000229  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f4b  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000bf5  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000327  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  000020d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003e6  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  0000251a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  000001a2  000001a2  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.uart0_init 00000024  00000146  00000146  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.putscUSART0 0000000e  00000186  00000186  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.getchUSART0 0000000e  00000194  00000194  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 00000006  00000140  00000140  00000194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.main    0000001c  0000016a  0000016a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  68:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  6c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  70:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  7c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  80:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  84:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  88:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  8c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  90:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  94:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  98:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  9c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  a0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  a4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  a8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  ac:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  b0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  b4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  b8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  bc:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  c0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  c4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  c8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  cc:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  d0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  d4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  d8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  dc:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  e0:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	e4 ee       	ldi	r30, 0xE4	; 228
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	19 c0       	rjmp	.+50     	; 0x12e <__do_clear_bss+0x8>
  fc:	b7 91       	elpm	r27, Z+
  fe:	a7 91       	elpm	r26, Z+
 100:	37 91       	elpm	r19, Z+
 102:	27 91       	elpm	r18, Z+
 104:	07 91       	elpm	r16, Z+
 106:	07 fd       	sbrc	r16, 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <__do_clear_bss>
 10a:	97 91       	elpm	r25, Z+
 10c:	87 91       	elpm	r24, Z+
 10e:	ef 01       	movw	r28, r30
 110:	f9 2f       	mov	r31, r25
 112:	e8 2f       	mov	r30, r24
 114:	0b bf       	out	0x3b, r16	; 59
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x22>
 120:	fe 01       	movw	r30, r28
 122:	1b be       	out	0x3b, r1	; 59
 124:	04 c0       	rjmp	.+8      	; 0x12e <__do_clear_bss+0x8>

00000126 <__do_clear_bss>:
 126:	1d 92       	st	X+, r1
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	e1 f7       	brne	.-8      	; 0x126 <__do_clear_bss>
 12e:	e4 3e       	cpi	r30, 0xE4	; 228
 130:	f4 07       	cpc	r31, r20
 132:	21 f7       	brne	.-56     	; 0xfc <__do_copy_data+0x8>
 134:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
 138:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

Disassembly of section .text:

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.uart0_init:

00000146 <uart0_init>:
	while(!(UCSR0A & (1<<RXC0))); // RXCn er 0 ved transmission indtil der er modtaget en byte (vente på at uart har modtaget en byte) 
	return UDR0;
}

//init function
void init(){
 146:	22 e0       	ldi	r18, 0x02	; 2
 148:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	20 81       	ld	r18, Z
 152:	28 61       	ori	r18, 0x18	; 24
 154:	20 83       	st	Z, r18
 156:	e2 ec       	ldi	r30, 0xC2	; 194
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	20 81       	ld	r18, Z
 15c:	26 60       	ori	r18, 0x06	; 6
 15e:	20 83       	st	Z, r18
 160:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 164:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 168:	08 95       	ret

Disassembly of section .text.putscUSART0:

00000186 <putscUSART0>:
	
}

// transmit one byte
void putscUSART0(char tx){
	while(!(UCSR0A & (1<<UDRE0))); // UDREn er 0 ved transmission indtil transmit buffer er tom (venter på at uart kan sende ny byte)
 186:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 18a:	95 ff       	sbrs	r25, 5
 18c:	fc cf       	rjmp	.-8      	; 0x186 <putscUSART0>
	UDR0 = tx;
 18e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 192:	08 95       	ret

Disassembly of section .text.getchUSART0:

00000194 <getchUSART0>:
}

// receive one byte
char getchUSART0(void){
	while(!(UCSR0A & (1<<RXC0))); // RXCn er 0 ved transmission indtil der er modtaget en byte (vente på at uart har modtaget en byte) 
 194:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 198:	88 23       	and	r24, r24
 19a:	e4 f7       	brge	.-8      	; 0x194 <getchUSART0>
	return UDR0;
 19c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 1a0:	08 95       	ret

Disassembly of section .text.main:

0000016a <main>:
//   
//    print_fonts();  //for test and then exclude the  clear_display(); call
//    //char text[]="en tekst string"; //string declared before use it in sendStrXY - 15 chars long incl spaces
//    clear_display();   //use this before writing you own text
   
   uart0_init(MYUBRRF);
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a3 00 	call	0x146	; 0x146 <uart0_init>
   
   //char var[4];
   UDR0 = "banan";
 172:	80 e4       	ldi	r24, 0x40	; 64
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
  while (1)
  {  
	 //putscUSART0('g');
	 putscUSART0(getchUSART0());
 17c:	0e 94 ca 00 	call	0x194	; 0x194 <getchUSART0>
 180:	0e 94 c3 00 	call	0x186	; 0x186 <putscUSART0>
 184:	fb cf       	rjmp	.-10     	; 0x17c <main+0x12>
