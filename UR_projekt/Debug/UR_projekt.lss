
UR_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000286  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001313  00000000  00000000  00000315  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ce4  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000441  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00002750  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000407  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d5  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00002dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000022e  0000022e  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000044  0000018e  0000018e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.uart0_init 00000024  000001d2  000001d2  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.putchUSART0 0000000e  00000212  00000212  00000266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.getchUSART0 0000000e  00000220  00000220  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.putsUSART0 0000001c  000001f6  000001f6  0000024a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.getsUSART0 0000004e  00000140  00000140  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  60:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  68:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  6c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  70:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  74:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  78:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  7c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  80:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  84:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  88:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  8c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  90:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  94:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  98:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  9c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  a8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  ac:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  b8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  bc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  c8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  cc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  d8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  dc:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  e0:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	e4 ee       	ldi	r30, 0xE4	; 228
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	19 c0       	rjmp	.+50     	; 0x12e <__do_clear_bss+0x8>
  fc:	b7 91       	elpm	r27, Z+
  fe:	a7 91       	elpm	r26, Z+
 100:	37 91       	elpm	r19, Z+
 102:	27 91       	elpm	r18, Z+
 104:	07 91       	elpm	r16, Z+
 106:	07 fd       	sbrc	r16, 7
 108:	0e c0       	rjmp	.+28     	; 0x126 <__do_clear_bss>
 10a:	97 91       	elpm	r25, Z+
 10c:	87 91       	elpm	r24, Z+
 10e:	ef 01       	movw	r28, r30
 110:	f9 2f       	mov	r31, r25
 112:	e8 2f       	mov	r30, r24
 114:	0b bf       	out	0x3b, r16	; 59
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 17       	cp	r26, r18
 11c:	b3 07       	cpc	r27, r19
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x22>
 120:	fe 01       	movw	r30, r28
 122:	1b be       	out	0x3b, r1	; 59
 124:	04 c0       	rjmp	.+8      	; 0x12e <__do_clear_bss+0x8>

00000126 <__do_clear_bss>:
 126:	1d 92       	st	X+, r1
 128:	a2 17       	cp	r26, r18
 12a:	b3 07       	cpc	r27, r19
 12c:	e1 f7       	brne	.-8      	; 0x126 <__do_clear_bss>
 12e:	e4 3e       	cpi	r30, 0xE4	; 228
 130:	f4 07       	cpc	r31, r20
 132:	21 f7       	brne	.-56     	; 0xfc <__do_copy_data+0x8>
 134:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
 138:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>

Disassembly of section .text:

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

0000018e <main>:
// 	data = UDR0;
// 	flag_r=1;
// }

int main(void)
{  
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	64 97       	sbiw	r28, 0x14	; 20
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
//   
//    print_fonts();  //for test and then exclude the  clear_display(); call
//    //char text[]="en tekst string"; //string declared before use it in sendStrXY - 15 chars long incl spaces
//    clear_display();   //use this before writing you own text
   
   uart0_init(MYUBRRF); // UART0 init
 1a2:	87 e6       	ldi	r24, 0x67	; 103
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <uart0_init>
   //sei(); // enable global interrupt (prevents putchUSART0(getchUSART0()); from working)
   
   
   //char var[4];
   int i = 0;
   char buffer[20] = {0};
 1aa:	fe 01       	movw	r30, r28
 1ac:	31 96       	adiw	r30, 0x01	; 1
 1ae:	84 e1       	ldi	r24, 0x14	; 20
 1b0:	df 01       	movw	r26, r30
 1b2:	1d 92       	st	X+, r1
 1b4:	8a 95       	dec	r24
 1b6:	e9 f7       	brne	.-6      	; 0x1b2 <main+0x24>
	 //putchUSART0(getchUSART0());
	 //_delay_ms(1000);
	 
	 
	 // NEW
	 i = getsUSART0(buffer, 7);
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <_etext>
	 if(i==7)
 1c4:	87 30       	cpi	r24, 0x07	; 7
 1c6:	c1 f7       	brne	.-16     	; 0x1b8 <main+0x2a>
	 putsUSART0(buffer); 
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <putsUSART0>
 1d0:	f3 cf       	rjmp	.-26     	; 0x1b8 <main+0x2a>

Disassembly of section .text.uart0_init:

000001d2 <uart0_init>:
**/
// init UART1
void uart0_init(unsigned int ubrr){
	
	// setting UCRSRn (USART Control and Status Register) (for A, B and C)
	UCSR0A=(1<<U2X0); // Full duplex // enable full duplex (aka. double speed?) (A register)
 1d2:	22 e0       	ldi	r18, 0x02	; 2
 1d4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B|=(1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);// enable receive + enable transmit + enable receive complete interrupt (B-register)
 1d8:	e1 ec       	ldi	r30, 0xC1	; 193
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	20 81       	ld	r18, Z
 1de:	28 69       	ori	r18, 0x98	; 152
 1e0:	20 83       	st	Z, r18
	
	// UCSZn sættes til 011. UCSZ02 er allerede 0, så derfor sættes UCSZ00 og UCSZ01.
	UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01); // set frame format (C-register) (8 bits, no parity, 1 start bit, 1 stop bit)
 1e2:	e2 ec       	ldi	r30, 0xC2	; 194
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	20 81       	ld	r18, Z
 1e8:	26 60       	ori	r18, 0x06	; 6
 1ea:	20 83       	st	Z, r18
	
	// setting UBRRn (USART Baud Rate Register) (16 bits where H is 8 bit high and L is 8 bit low) (skal beregnes: se tabel i datablad)
	// datablad: s.207
	UBRR0H =(unsigned char)(ubrr>>8); // skriver de 8 høje bit. (skiftes da der er 16 bit i alt i UBRRn)
 1ec:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L =(unsigned char)ubrr; // skriver de 8 lave bit.
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 1f4:	08 95       	ret

Disassembly of section .text.putchUSART0:

00000212 <putchUSART0>:
/**
	UART CHARACTERS
**/
// transmit one byte/character
void putchUSART0(char tx){
	while(!(UCSR0A & (1<<UDRE0))); // UDREn er 0 ved transmission indtil transmit buffer er tom (venter på at uart kan sende ny byte) (sker i UCSRnA registret)
 212:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 216:	95 ff       	sbrs	r25, 5
 218:	fc cf       	rjmp	.-8      	; 0x212 <putchUSART0>
	UDR0 = tx; // put data into buffer and send it (skriver til UDR registret...UART I/O Data Register)
 21a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 21e:	08 95       	ret

Disassembly of section .text.getchUSART0:

00000220 <getchUSART0>:
}

// receive one byte/character (skal ikke bruges i UR-projekt => skal ersttes af service routine)
 char getchUSART0(void){
	while(!(UCSR0A & (1<<RXC0))); // RXCn er 0 ved transmission indtil der er modtaget en byte/character (vente på at uart har modtaget en byte/character) (sker i UCSRnA registret)
 220:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 224:	88 23       	and	r24, r24
 226:	e4 f7       	brge	.-8      	; 0x220 <getchUSART0>
	return UDR0; // get received data from buffer (modtager data fra UDR registret...UART I/O Data Register)
 228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 22c:	08 95       	ret

Disassembly of section .text.putsUSART0:

000001f6 <putsUSART0>:
/**
	UART STRINGS
**/

// transmit one string (by calling putsUSART0 continuously until whole string is sent)
void putsUSART0(char *ptr){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
	
	while(*ptr){
 1fc:	04 c0       	rjmp	.+8      	; 0x206 <putsUSART0+0x10>
		putsUSART0(*ptr);
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <putsUSART0>
		ptr++;
 204:	21 96       	adiw	r28, 0x01	; 1
**/

// transmit one string (by calling putsUSART0 continuously until whole string is sent)
void putsUSART0(char *ptr){
	
	while(*ptr){
 206:	88 81       	ld	r24, Y
 208:	81 11       	cpse	r24, r1
 20a:	f9 cf       	rjmp	.-14     	; 0x1fe <putsUSART0+0x8>
		putsUSART0(*ptr);
		ptr++;
	}
	
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

Disassembly of section .text.getsUSART0:

00000140 <getsUSART0>:

// receive one string
char getsUSART0(char *p, int max){
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
 14c:	7b 01       	movw	r14, r22
	
	char cx;
	char i = 0;
 14e:	10 e0       	ldi	r17, 0x00	; 0
	char BS = 0x08;
	char space = 0x20;
	
	// i<max Prevent buffer overrun
	while(((cx = getchUSART0()) != 0x0D) && i<max){
 150:	0d c0       	rjmp	.+26     	; 0x16c <getsUSART0+0x2c>
		
		*p=cx;
 152:	88 83       	st	Y, r24
		
		if(cx==BS){
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	41 f4       	brne	.+16     	; 0x168 <getsUSART0+0x28>
			putchUSART0(space);
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	0e 94 09 01 	call	0x212	; 0x212 <putchUSART0>
			putchUSART0(BS);
 15e:	88 e0       	ldi	r24, 0x08	; 8
 160:	0e 94 09 01 	call	0x212	; 0x212 <putchUSART0>
			p--;
 164:	21 97       	sbiw	r28, 0x01	; 1
 166:	02 c0       	rjmp	.+4      	; 0x16c <getsUSART0+0x2c>
		}else{
			p++;
 168:	21 96       	adiw	r28, 0x01	; 1
			i++;
 16a:	1f 5f       	subi	r17, 0xFF	; 255
	char i = 0;
	char BS = 0x08;
	char space = 0x20;
	
	// i<max Prevent buffer overrun
	while(((cx = getchUSART0()) != 0x0D) && i<max){
 16c:	0e 94 10 01 	call	0x220	; 0x220 <getchUSART0>
 170:	8d 30       	cpi	r24, 0x0D	; 13
 172:	29 f0       	breq	.+10     	; 0x17e <getsUSART0+0x3e>
 174:	21 2f       	mov	r18, r17
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	2e 15       	cp	r18, r14
 17a:	3f 05       	cpc	r19, r15
 17c:	54 f3       	brlt	.-44     	; 0x152 <getsUSART0+0x12>
			i++;
		}
		
	}
	
	*p=0;
 17e:	18 82       	st	Y, r1
	return i;
	
 180:	81 2f       	mov	r24, r17
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	08 95       	ret
